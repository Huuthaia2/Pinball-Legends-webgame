[1,["ecpdLyjvZBwrvm+cedCcQy","f0LK7PUWFIwqXhUVzFczeO","d3Rbrbo9ZHH7qpAxAP3hWW","7bTU4fhzNMV65GmUxcER6A","0eTtQ9GRxCYo+ts6YhpSV5"],["root","sceneBg","node","data","rippleMaterial","_spriteFrame","_textureSetter","_effectAsset"],["cc.SpriteFrame",["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.Node",["_name","_components","_prefab","_contentSize"],2,12,4,5],["afffbClovJETZ2JZIAFMZG3",["node","sceneBg","rippleMaterial"],3,1,1,6],["cc.PrefabInfo",["root"],3,1],["cc.Sprite",["node","_materials"],3,1,3],["cc.Material",["_name","_techniqueData"],1]],[[1,0,1,2,4],[2,0,2],[3,0,1,2,3,2],[4,0,1,2,1],[5,0,1],[6,0,1,1],[7,0,1,3]],[[[[0,"RippleEffect",[{"hash":2252508166,"record":null,"name":"RippleEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform ARGS{\n  float timeTest;\n  float avv;\n};\nuniform Light {\n  vec4 RippleColor;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float wavespeed = 1.5;\n  float wavesize = 0.25;\n  float time = timeTest * wavespeed;\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv * avv * wavesize, avv) - 250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = 0.0045;\n  for (int n = 0; n < 4; n++)\n  {\n      float t = time * (1.0 - (3.5 / float(n + 1)));\n      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));\n      c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  c /= float(5);\n  c = 1.17-pow(c, 1.4);\n  vec4 tex = texture2D(texture, uv);\n  vec3 colorr = vec3(RippleColor.r, RippleColor.g, RippleColor.b);\n  vec3 colour = vec3(pow(abs(c), 20.0));\n  colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n  float alpha = c * tex[3];\n  tex[0] = tex[0] + colour[0] * alpha;\n  tex[1] = tex[1] + colour[1] * alpha;\n  tex[2] = tex[2] + colour[2] * alpha;\n  gl_FragColor = o * tex ;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nuniform float timeTest;\nuniform float avv;\nuniform vec4 RippleColor;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  float wavespeed = 1.5;\n  float wavesize = 0.25;\n  float time = timeTest * wavespeed;\n  vec2 uv = v_uv0.xy;\n  vec2 p = mod(uv * avv * wavesize, avv) - 250.0;\n  vec2 i = vec2(p);\n  float c = 1.0;\n  float inten = 0.0045;\n  for (int n = 0; n < 4; n++)\n  {\n      float t = time * (1.0 - (3.5 / float(n + 1)));\n      i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));\n      c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n  }\n  c /= float(5);\n  c = 1.17-pow(c, 1.4);\n  vec4 tex = texture2D(texture, uv);\n  vec3 colorr = vec3(RippleColor.r, RippleColor.g, RippleColor.b);\n  vec3 colour = vec3(pow(abs(c), 20.0));\n  colour = clamp(colour + vec3(0.0, 0.0, .0), 0.0, tex.a);\n  float alpha = c * tex[3];\n  tex[0] = tex[0] + colour[0] * alpha;\n  tex[1] = tex[1] + colour[1] * alpha;\n  tex[2] = tex[2] + colour[2] * alpha;\n  gl_FragColor = o * tex ;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"ARGS","binding":1,"members":[{"name":"timeTest","type":13,"count":1},{"name":"avv","type":13,"count":1}],"defines":[]},{"name":"Light","binding":2,"members":[{"name":"RippleColor","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"RippleEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"timeTest":{"type":13,"value":[1],"editor":{"tooltip":"速度"}},"RippleColor":{"type":16,"value":[1,1,1,1],"editor":{"tooltip":"水纹颜色"}},"avv":{"type":13,"value":[16.1],"editor":{"tooltip":"水纹虚幻度 越大越多"}}}}]}]]],0,0,[],[],[]],[[[1,"SmallScene"],[2,"SmallScene",[[-2,[3,-4,-3,1]],1,4],[4,-1],[5,268,369]],[5,1,[0]]],0,[0,0,1,0,-1,2,0,1,2,0,2,1,0,3,1,4],[0,0,2],[-1,4,5],[0,1,2]],[[{"name":"scene1_bg","rect":[0,0,268,369],"offset":[0,0],"originalSize":[268,369],"capInsets":[0,0,0,0]}],[0],0,[0],[6],[3]],[[[6,"RippleMetrail",{"0":{"defines":{"USE_TEXTURE":true},"props":{"avv":16.1}}}]],0,0,[0],[7],[4]]]]